plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '6.0.24'
    id 'jacoco'
}

group = 'com.learning.book.api'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    implementation 'org.mapstruct:mapstruct:1.6.2'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

checkstyle {
    toolVersion = '10.12.0'
    configFile = file("${project.rootDir}/config/checkstyle/google_checks.xml")
    ignoreFailures = true
    maxWarnings = 0
    reportsDir = file("${buildDir}/reports/checkstyle")
}

tasks.withType(Checkstyle) {
    reports {
        html.required.set(true)
        xml.required.set(true)
    }
}

pmd {
    toolVersion = '7.12.0'
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/config/pmd/ruleset.xml")
    consoleOutput = true
    reportsDir = file("${buildDir}/reports/pmd")
}

tasks.withType(Pmd) {
    reports {
        html.required.set(true)
        xml.required.set(true)
    }
}

spotbugs {
    toolVersion = '4.8.6'
    ignoreFailures = true
    effort = com.github.spotbugs.snom.Effort.MAX
    excludeFilter = file("${project.rootDir}/config/spotbugs/excludeFilter.xml")
    reportsDir = file("${buildDir}/reports/spotbugs")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        html.required.set(true)
        xml.required.set(true)
    }
}

jacoco {
    toolVersion = '0.8.12'
}

jacocoTestReport {
    reports {
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.outputLocation = file("${buildDir}/reports/jacoco/test/html")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/learning/book/api/BookApiApplication.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    executionData.setFrom(fileTree(buildDir).include("jacoco/*.exec"))
    doLast {
        def violations = violationRules.rules.findAll { it.violated }
        if (violations) {
            logger.warn("JaCoCo coverage violations detected:")
            violations.each { rule ->
                rule.limits.each { limit ->
                    if (limit.violated) {
                        logger.warn("  - ${limit.counter} coverage: ${limit.coveredRatio} (minimum: ${limit.minimum})")
                    }
                }
            }
        } else {
            logger.info("JaCoCo coverage check passed.")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}